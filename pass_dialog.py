# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PassDialog
                                 A QGIS plugin
 Sistema Integracion de Gesti√≥n Catastral
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-23
        git sha              : $Format:%H$
        copyright            : (C) SyK Catastro Sistemas
        email                : sykcatastro.sistemas@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt.QtCore import pyqtSignal, QRect
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'pass_dialog_base.ui'))


class PassDialog(QtWidgets.QDialog, FORM_CLASS):
    closed = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(PassDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        pass1 = CustomLine(self) 
        pass1.setGeometry(QRect(200, 20, 221, 31))
        pass1.setObjectName("lineEdit_pw_1")
        self.lineEdit_pw_1 = pass1
        pass2 = CustomLine(self) 
        pass2.setGeometry(QRect(200, 70, 221, 31))
        pass2.setObjectName("lineEdit_pw_2")
        self.lineEdit_pw_2 = pass2

    def closeEvent(self, event):
        self.closed.emit()
        event.accept() # let the window close

# Custom line edit with focus_out
class CustomLine(QtWidgets.QLineEdit):
    lost_focus = pyqtSignal()
    def __init__(self, *args):
        QtWidgets.QLineEdit.__init__(self, *args)
        self.setEchoMode(QtWidgets.QLineEdit.Password)

    def initialize(self, name):
        self._name = name
 
    def focusOutEvent(self, e):
        QtWidgets.QLineEdit.focusOutEvent(self, e)
        if not (self.hasFocus()):
            self.lost_focus.emit()